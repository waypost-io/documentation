"use strict";(self.webpackChunkwaypost_documentation=self.webpackChunkwaypost_documentation||[]).push([[790],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8080:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:4},l="SDK Reference",c={unversionedId:"sdk/reference",id:"sdk/reference",title:"SDK Reference",description:"The client-side and server-side SDK\u2019s are extremely similar. The main difference between the two is that the client-side (React) SDK exports the additional objects WaypostContext and WaypostProvider , which use React Context. The WaypostProvider component takes the config (instance of the Config class) as an argument, and the SDK client is created inside of the component.",source:"@site/docs/sdk/reference.md",sourceDirName:"sdk",slug:"/sdk/reference",permalink:"/documentation/sdk/reference",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Node SDK",permalink:"/documentation/sdk/node-sdk"},next:{title:"General Experimentation Guidelines",permalink:"/documentation/experimentation/experimentation_guidelines"}},p={},u=[{value:"Config",id:"config",level:3},{value:"Client",id:"client",level:3}],d={toc:u};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sdk-reference"},"SDK Reference"),(0,i.kt)("p",null,"The client-side and server-side SDK\u2019s are extremely similar. The main difference between the two is that the client-side (React) SDK exports the additional objects ",(0,i.kt)("inlineCode",{parentName:"p"},"WaypostContext")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"WaypostProvider")," , which use React Context. The ",(0,i.kt)("inlineCode",{parentName:"p"},"WaypostProvider")," component takes the ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," (instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Config")," class) as an argument, and the SDK client is created inside of the component."),(0,i.kt)("p",null,"In contrast, the server-side SDK does not need React Context, and instead you will call ",(0,i.kt)("inlineCode",{parentName:"p"},"connect()")," inside of a middleware function to receive the SDK client, which will get set on the request object."),(0,i.kt)("h3",{id:"config"},"Config"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Config")," class is the primary export of the Waypost SDK. You will need to instantiate it one time in your app using the constructor."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constructor Parameters:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sdkKey")," - A ",(0,i.kt)("strong",{parentName:"li"},"string")," representing the SDK Key that will be used by the flag provider service for authorization of the requester. You can find this on Waypost-UI\u2019s ",(0,i.kt)("em",{parentName:"li"},"SDK Key")," page."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"providerAddress")," - A ",(0,i.kt)("strong",{parentName:"li"},"string")," representing the URL where the Waypost flag provider service is hosted. It will be used for making API calls to receive the feature flag data.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Instance Methods")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Config.prototype.connect()"))),(0,i.kt)("p",null,"This instance method creates an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Client")," class, calls the async ",(0,i.kt)("inlineCode",{parentName:"p"},"getFlagData()")," method on it, and then returns the client object. If using the Node SDK, you will need to call this and save the return value into a variable, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"sdkClient"),"."),(0,i.kt)("h3",{id:"client"},"Client"),(0,i.kt)("p",null,"You will not need to instantiate this yourself, since the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Config.prototype.connect()"))," method does this automatically."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Instance Methods")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Client.prototype.addContext(context)"))),(0,i.kt)("p",null,"This instance method takes an ",(0,i.kt)("strong",{parentName:"p"},"object")," containing at least one key called ",(0,i.kt)("inlineCode",{parentName:"p"},"userId"),", which you assign to an identifier such as a user ID or session ID."),(0,i.kt)("p",null,"This allows us to use that identifier to determine the status of a given feature flag for that user. This is necessary for experiments (A/B tests), in which some percentage of users receive one treatment, and should continue receiving the same treatment each time they access your application."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Client.prototype.evaluateFlag(featureName, defaultVal)"))),(0,i.kt)("p",null,"This instance method has two required parameters. The first argument is the ",(0,i.kt)("inlineCode",{parentName:"p"},"featureName"),",  a ",(0,i.kt)("strong",{parentName:"p"},"string")," that should match the name of a feature flag that you have created in the Waypost-UI. The second argument is the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultVal"),", a ",(0,i.kt)("strong",{parentName:"p"},"boolean")," representing what the default status should be if the flag data is unavailable for some reason."))}f.isMDXComponent=!0}}]);